<!DOCTYPE html>
<html lang="en">
<head>

  {% include 'parts/header.twig' %}

  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
    integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
    crossorigin=""/>

  <link rel="stylesheet" href="http://fperucic.github.io/treant-js/Treant.css"/>

  <style>
    html, body, #map {
      height: 100%;
      overflow: hidden;
    }
    .fullscreen nav {
      box-shadow: 0 0 6px #aaa;
      background: #0078ff;
      padding: 0
    }
    #toolbar {
      position: fixed;
      bottom: 10px;
      left: 10px
    }
    .node circle {
      fill: #fff;
      stroke: steelblue;
      stroke-width: 1.5px;
      cursor: pointer;
      overflow: visible
    }
    .link {
      fill: none;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .templink {
      fill: none;
      stroke: red;
      stroke-width: 3px;
    }
    .fo div {
      min-height: 25px;
    }
    .label {
      background: white;
      font-size: 0.7rem;
      padding: 4px;
      border: 1px solid black;
      width: 100%
    }
    .autocomplete-suggestions {
      border: 1px solid #999;
      background: #fff;
      padding: 6px
    }
    .autocomplete-suggestion {
      cursor: pointer;
      padding: 2px;
    }
    .autocomplete-suggestion:hover {
      background: #fafafa;
    }

  </style>

</head>

<body class="fullscreen">
  <!--/ Nav Start /-->
  {% include 'parts/menu.twig' %}
  <!--/ Nav End /-->

  <section id="map"></section>
  <div id="toolbar" class="">
    <button class="btn btn-primary add"
      role="button"
      data-toggle="modal"
      data-target="#rowEdit"
      data-row="">
      <i class="icon ion-md-add"></i> Lisa uus
    </button>
    <span class="coords"></span>
  </div>
  <div id="list">
    <div class="list-group"></div>
  </div>

  {% include 'parts/table-modal.twig' %}

  {% include 'parts/scripts.twig' %}

  <script src="https://d3js.org/d3.v3.min.js"></script>
  <script src="{{ theme_url }}/lib/jquery.autocomplete.min.js"></script>
  <script src="{{ theme_url }}/js/familytree.js"></script>

  <script type="text/javascript">

    const config = {
      url: '{{ config.api.url }}/{{ meta.api.source }}',
      hash: '{{ config.api.grant|base64_encode }}',
      params: 'filter=deleted,eq,0',
      primary: 'id',
      delete: 'deleted',
      col: {{ meta.table.columns|json_encode() }},
      search: {
        bound_with: []
      }
    }

    const api = new Api({ endpoint: config.url, hash: config.hash });

    function getNested(arr, parent) {
      let out = []
      for (var i in arr) {
        if (arr[i].bound_with == parent) {
          const related = getNested(arr, arr[i].id)
          const children = related.filter(r => r.bound_is === 'child')
          const partners = related.filter(r => r.bound_is === 'partner')
          const unsure = related.filter(r => r.bound_is !== 'partner' && r.bound_is !== 'child')
          if(children.length) {
            arr[i].children = children
          }
          if(partners.length) {
            arr[i].partner = partners
          }
          if(unsure.length) {
            out = out.concat(unsure)
          }
          out.push(arr[i])
        }
      }
      return out
    }

    function getFormData() {
      const row = $('#rowEdit').find('form').serializeObject()
      return formatRow(row)
    }

    function formatRow(row) {
      Object.keys(row).forEach(key => {
        if (row[key] === '') {
          row[key] = null
        }
        if (key === config.primary) {
          row[key] = Number(row[key])
        }
        if (key === 'bound_with' && row[key]) {
          row[key] = Number(row[key])
        }
      })
      return row
    }

    function nameFormat(row) {
      return [row.firstname, row.lastname || '', row.birth || ''].join(' ')
    }

    (function($) {

      var apidata = []

      const ftree = new FamilyTree({
        target: '#map',
        nameFormat: nameFormat
      })

      function initTree(data) {
        const treeData = getNested(data)
        if (treeData.length > 1) {
          ftree.create({
            id: 0,
            firstname: 'Sugupuu',
            lastname: 'osad',
            children: treeData
          })
        } else if (treeData.length > 0) {
          ftree.create(treeData[0])
        }
      }

      function reload() {
        api.load({ params: config.params })
          .then(response => {
            apidata = response
            config.search.bound_with = apidata.map(row => {
              return {
                data: row[config.primary],
                value: `${nameFormat(row)}`
              }
            })
            initTree(apidata)
          })
          .catch(e => {
            console.error(e)
          })
      }

      setTimeout(() => {
        if (!config.url) {
          return false
        }
        reload()
      }, 200)

      // modal
      $('#rowEdit').on('show.bs.modal', e => {
        const primary = Number($(e.relatedTarget).data('row'))
        let row = Object.keys(config.col).reduce((a,b)=> (a[b]='',a),{})
        if (primary) {
          let rows = apidata.filter(item => {
            return item[config.primary] === primary
          })
          if (rows.length) {
            row = formatRow(rows[0])
          }
        }
        TableModal.onShow($(e.target), config, row)
      }).on('hide.bs.modal', e => {
        TableModal.onHide($(e.target), config)
      })

      // save row
      $('#rowEdit').on('click', '.save', e => {
        const row = getFormData()
        const primary = row[config.primary]
        delete row[config.primary]
        if (primary) {
          api.update(primary, row)
            .then(response => {
              $('#rowEdit').find('.save').toggleClass('btn-primary btn-success')
              reload()
              setTimeout(() => {
                $('#rowEdit').modal('hide')
              }, 900)
            })
            .catch(error => console.error(error))
        } else {
          api.insert(row)
            .then(response => {
              $('#rowEdit').find('.save').toggleClass('btn-primary btn-success')
              reload()
              setTimeout(() => {
                $('#rowEdit').modal('hide')
              }, 900)
            })
            .catch(error => console.error(error))
        }
      })

      // delete row
      $('#rowEdit').on('click', '.delete', e => {
        const action = $(e.currentTarget).data('action')
        switch (action) {
          case 'confirm':
            $(e.currentTarget)
              .toggleClass('btn-light btn-danger')
              .data('action', 'confirmed')
              .find('span').text('Kinnita kustutamine')
            break;
          case 'confirmed':
            $(e.currentTarget)
              .toggleClass('btn-light btn-danger')
              .data('action', 'confirm')
              .prop('disabled', true)
              .find('span').text('Kustuta')
            let row = getFormData()
            const primary = row[config.primary]
            row = {}
            row[config.delete] = true
            api.update(primary, row)
              .then(response => {
                reload()
                setTimeout(() => {
                  $('#rowEdit').modal('hide')
                }, 900)
              })
              .then()
              .catch(error => console.error(error))
            break
        }
      });

    })(jQuery);

  </script>

</body>
</html>
