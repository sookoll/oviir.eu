<!DOCTYPE html>
<html lang="en">
<head>

  {% include 'parts/header.twig' %}

  <style>

    #phototag {
      position: relative;
    }
    #phototag .photomap {
      position:absolute;
      width:100%;
      height:100%;
      top:0px;
      left:0px;
    }
    #phototag .photomap div {
      position:absolute;
      cursor:pointer;
      border:1px solid transparent;
    }
    #phototag .photomap:hover div {
      border:1px dashed #fff;
    }
    #phototag .photomap div i {
      position: absolute;
      bottom: -40px;
      width: 100%;
      text-align: center;
      display: none;
      color: white;
      font-size: 1.3rem;
    }
    #phototag .photomap div.active {
      border:2px dashed #fff;
    }
    #phototag .photomap div.active i {
      display: block
    }
    #phototag .tagCanvas {
      position:absolute;
      top:0px;
      left:0px;
    }
    #tags {
      padding-left: 0;
      padding-right: 0
    }
    #tags .tag {
      color: #212529
    }
    #tags .tag.active {
      font-weight: bold;
    }

  </style>

</head>

<body>
  <!--/ Nav Start /-->
  {% include 'parts/menu.twig' %}
  <!--/ Nav End /-->

  <!--/ Intro Skew Star /-->
  <div class="intro intro-single route bg-image" style="background-image: url({{ meta.image }})">
    <div class="overlay-mf"></div>
    <div class="intro-content display-table">
      <div class="table-cell">
        <div class="container">
          <h2 class="intro-title mb-4">{{ meta.date|date('Y') }}</h2>
          <ol class="breadcrumb d-flex justify-content-center">
            <li class="breadcrumb-item">
              <a href="/">Avaleht</a>
            </li>
            <li class="breadcrumb-item">
              <a href="/kokkutulekud">Kokkutulekud</a>
            </li>
            <li class="breadcrumb-item active">{{ meta.title }}</li>
          </ol>
        </div>
      </div>
    </div>
  </div>
  <!--/ Intro Skew End /-->

  <!--/ Section Blog-Single Star /-->
  <section class="blog-wrapper sect-pt4" id="blog">
    <div class="container">
      {% if meta.image %}
      <div class="mb-4">
        <div id="phototag">
          <img src="{{ meta.image }}" class="img-fluid" alt="">
          <div class="photomap"></div>
        </div>
        <div class="toolbar">
          <button class="btn btn-link"
            id="activate"
            role="button">
            <i class="icon ion-ios-pricetags"></i> Märgi sugulane
          </button> |
          <span id="tags"><em class="btn text-muted">Siin pildil saad ära märkida inimesed, kes osalesid kokkutulekul.</em></span>
        </div>
      </div>
      {% endif %}
      <div class="row">
        <div class="col-md-8">
          <div class="post-box">
            <h1 class="article-title mb-4">{{ meta.title }}</h1>
            <div class="article-content lead">
              <table class="table table-bordered mb-5">
                <tr>
                  <th scope="row">Jrk.</th>
                  <td>{{ meta.number }}</td>
                </tr>
                <tr>
                  <th scope="row">Korraldas</th>
                  <td>{{ meta.organizer }}</td>
                </tr>
                <tr>
                  <th scope="row">Aeg</th>
                  <td>{{ meta.event_date }}</td>
                </tr>
                <tr>
                  <th scope="row">Koht</th>
                  <td>{{ meta.place }}</td>
                </tr>
                <tr>
                  <th scope="row">Osalejaid</th>
                  <td>{{ meta.people_count }}</td>
                </tr>
              </table>

              {{ content }}

            </div>
          </div>

          {% set prev_event = {} %}
          {% set next_event = {} %}
          {% set lastwascurrent = false %}
          {% set lastpage = {} %}
          {% for page in pages if page.meta.category == "kokkutulek" %}
            {% if lastwascurrent %}
              {% set next_event = page %}
              {% set lastwascurrent = false %}
            {% endif %}
            {% if page.id == current_page.id %}
              {% set lastwascurrent = true %}
              {% set prev_event = lastpage %}
            {% endif %}
            {% set lastpage = page %}
          {% endfor %}

          <div class="row">
            <div class="col-md-6 mb-3">
              {% if next_event %}
              <div class="work-box">
                <a href="{{ next_event.url }}">
                  <div class="work-img">
                    <img src="{{ next_event.meta.thumbnail }}" alt="" class="img-fluid">
                  </div>
                  <div class="work-content">
                    <h2 class="w-title">{{ next_event.meta.number }}. {{ next_event.meta.title }}</h2>
                  </div>
                  <span class="index">{{ next_event.meta.date|date('Y') }}</span>
                </a>
              </div>
              {% endif %}
            </div>
            <div class="col-md-6 mb-3">
              {% if prev_event and prev_event.meta.category == 'kokkutulek' %}
              <div class="work-box">
                <a href="{{ prev_event.url }}">
                  <div class="work-img">
                    <img src="{{ prev_event.meta.thumbnail }}" alt="" class="img-fluid">
                  </div>
                  <div class="work-content">
                    <h2 class="w-title">{{ prev_event.meta.number }}. {{ prev_event.meta.title }}</h2>
                  </div>
                  <span class="index">{{ prev_event.meta.date|date('Y') }}</span>
                </a>
              </div>
              {% endif %}
            </div>
          </div>
        </div>
        <div class="col-md-4">
          {% set videos = [] %}
          {% set albums = [] %}
          {% for page in pages if meta.date|date('Y') in page.meta.tags %}
            {% if page.meta.category == 'video' %}
              {% set videos = videos|merge([page]) %}
            {% elseif page.meta.category == 'pildialbum' %}
              {% set albums = albums|merge([page]) %}
            {% endif %}
          {% endfor %}

          {% for page in albums %}
          {% include 'parts/album.twig' with { grid: 'blah' } %}
          {% endfor %}

          {% for page in videos %}
          {% include 'parts/document.twig' with { doc: page, grid: 'blah', icon: 'ion-md-videocam' } %}
          {% endfor %}
          <div class="widget-sidebar">
            <h5 class="sidebar-title">Tulemas</h5>
            <div class="sidebar-content">
              {{ "kokkutulekud"|content }}
            </div>
          </div>
          {% include 'parts/tags-widget.twig' %}
        </div>
      </div>
    </div>
  </section>
  <!--/ Section Blog-Single End /-->

  {% include 'parts/footer.twig' %}

  {% include 'parts/scripts.twig' %}

  {% if meta.image %}

  <script type="text/javascript">

    const config = {
      url: 'https://oviir.eu/api/crud.php/records/phototags',
      params: 'filter=deleted,eq,0&filter=category,eq,kokkutulek&filter=item,eq,{{ meta.number }}',
      primary: 'id',
      delete: 'deleted',
      item: {{ meta.number }},
      user: '{{ user }}',
      category: '{{ meta.category }}'
    }

    function ImageTagger(selector, data) {
      this.el = $(selector)
      this.active = false
      this.canvas = null
      this.tags = data
      this.ii = this.tags.length
      this.paint = false
      this.events = {
        'activate': [],
        'deactivate': [],
        'save': [],
        'remove': [],
        'select': [],
        'deselect': []
      }
      this.el.find('.photomap').on('click', e => {
        $(e.target).find('div').removeClass('active')
        this.fire('deselect')
      })

      this.getImage = () => {
        return this.el.find('img')
      }

      this.on = (event, cb) => {
        if (event in this.events) {
          this.events[event].push(cb)
        }
      }

      this.fire = (event, data) => {
        if (event in this.events) {
          this.events[event].forEach(cb => {
            cb(data)
          })
        }
      }

      this.activate = () => {
        this.active = true
        const w = this.getImage().width()
        const h = this.getImage().height()
        this.canvas = $(`<canvas class="tagCanvas" width="${w}" height="${h}"></canvas>`)
        this.el.append(this.canvas)
        this.canvas.css('cursor', 'crosshair')
        this.el.find('.photomap').html('')
        this.redraw()
        this.canvas.on('mousedown', e => {
          if (!this.paint && this.active) {
            this.paint = true
            this.addClick(e.pageX - this.el.offset().left, e.pageY - this.el.offset().top)
          }
        })
        this.canvas.on('mousemove', e => {
          if (this.paint && this.active) {
            this.addClick(e.pageX - this.el.offset().left, e.pageY - this.el.offset().top, true)
            this.redraw()
          }
        })
        this.canvas.on('mouseup', e => {
          if (this.paint && this.active) {
            this.addTagger()
          }
        })
        this.fire('activate')
      }

      this.deactivate = () => {
        this.active = false
        if (this.canvas) {
          this.canvas.remove()
        }
        let map = []
        for (let i in this.tags) {
          const x = this.tags[i].xi < this.tags[i].xii ? this.tags[i].xi : this.tags[i].xii
          const y = this.tags[i].yi < this.tags[i].yii ? this.tags[i].yi : this.tags[i].yii
          map.push(`<div id="${i}" data-toggle="tooltip"
            style="top: ${y}px; left:${x}px; width: ${Math.abs(this.tags[i].xii - this.tags[i].xi)}px; height: ${Math.abs(this.tags[i].yii - this.tags[i].yi)}px;"
            title="${this.tags[i].username}"><i class="icon ion-md-close"></i></div>`)
        }
        this.fire('deactivate', this.tags)
        this.el.find('.photomap').html(map.join(''))
        this.el.find('[data-toggle="tooltip"]').tooltip()
        this.el.find('.photomap').find('div').on('click', e => {
          e.stopPropagation()
          this.el.find('.photomap').find('div').not(e.target).removeClass('active')
          $(e.target).toggleClass('active')
          const event = $(e.target).hasClass('active') ? 'select' : 'deselect'
          this.fire(event, $(e.target).attr('id'))
        })
        this.el.find('.photomap').find('div i').on('click', e => {
          e.stopPropagation()
          $(e.target).parent().tooltip('hide')
          const id = $(e.target).parent().attr('id')
          this.removeTag(id)
          $(e.target).parent().remove()
        })
      }

      this.redraw = () => {
        if (this.active) {
          const context = this.canvas[0].getContext("2d")
          this.canvas[0].width = this.canvas[0].width // Clears the canvas
          context.strokeStyle = "#fff"
          context.lineJoin = "round"
          context.lineWidth = 3
          context.globalAlpha = 0.7
          for (let i in this.tags) {
            context.strokeRect(this.tags[i].xi, this.tags[i].yi, this.tags[i].xii - this.tags[i].xi, this.tags[i].yii - this.tags[i].yi)
          }
        }
      }

      this.addClick = (x, y, dragging) => {
        if (dragging) {
          this.tags[this.ii].xii = x
          this.tags[this.ii].yii = y
        } else {
          this.tags[this.ii] = { id: null, user: null, username: null, xi: x, yi: y, xii: x, yii: y }
        }
      }

      this.addTagger = () => {
        this.paint = false
        // check size
        if (
          Math.abs(this.tags[this.ii].xii - this.tags[this.ii].xi) < 10 ||
          Math.abs(this.tags[this.ii].yii - this.tags[this.ii].yi) < 10
        ) {
          this.removeTag(this.ii)
          return false
        }
        const x = this.tags[this.ii].xi + (this.tags[this.ii].xii - this.tags[this.ii].xi) / 2
        const y = this.tags[this.ii].yi + (this.tags[this.ii].yii - this.tags[this.ii].yi) / 2
        const pop = $('<div class="tagger"></div>')
        pop.css({ top: y + 'px', left: x + 'px', width: '6px', height: '6px', position: 'absolute' })
        this.el.append(pop)
        pop.popover({
          html : true,
          title: `&nbsp;<button type="button" class="close" data-dismiss="popover" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>`,
          content: `<div class="input-group p-2">
            <input type="text" class="form-control" placeholder="Sisesta nimi">
            <div class="input-group-append">
              <button class="btn btn-primary save" type="button">
                <i class="icon ion-ios-save"></i>
              </button>
            </div>
          </div>`,
          placement: 'auto',
          trigger: 'manual',
          offset: 50
        }).on('shown.bs.popover', e => {
          $('.popover').find('input').focus()
          $('.popover').find('.close').on('click', e => {
            pop.popover('hide')
            this.removeTag(this.ii)
            this.deactivate()
          })
          $('.popover').find('.save').on('click', e => {
            pop.popover('hide')
            this.saveTag(this.ii, $('.popover').find('input').val())
          })
          this.active = false
        }).on('hidden.bs.popover', e => {
          pop.remove()
          this.active = true
        }).popover('show')
      }

      this.saveTag = (i, value) => {
        // save to api
        this.tags[this.ii].username = value
        this.tags[this.ii].user = 1
        this.fire('save', this.tags[this.ii])
        this.ii++
        this.deactivate()
      }

      this.removeTag = (i) => {
        this.fire('remove', [i, this.tags[i]])
        this.tags.splice(i, 1)
        this.redraw()
      }

      this.getTagEl = (i) => {
        return this.el.find('#' + i)
      }

      this.deactivate()
    }

    function createTag (i, name) {
      return `<button class="btn btn-link tag" data-target="${i}">${name}</button>`
    }

    function init(data) {
      const infoText = $('#tags').html()
      $('#tags').html(data.records.length ? data.records.map((tag, i) => createTag(i, tag.username)).join('') : infoText)
      const it = new ImageTagger('#phototag', data.records)

      it.on('activate', () => {
        $('#activate').prop('disabled', true)
        $('#tags').find('.tag').prop('disabled', true)
      })
      it.on('deactivate', (tags) => {
        $('#activate').prop('disabled', false)
        $('#tags').find('.tag').prop('disabled', false)
        $('#tags').html(tags.length ? tags.map((tag, i) => createTag(i, tag.username)).join('') : infoText)
      })
      it.on('save', (data) =>{
        save(null, formatRow(Object.assign({}, data)))
          .then(response => {
            console.log(response)
          })
      })
      it.on('remove', (data) =>{
        $('#tags').find(`.tag[data-target='${data[0]}'] `).remove()
        if (!$('#tags').find('.tag').length) {
          $('#tags').html(infoText)
        }
        if (data[1] && data[1][config.primary]) {
          const primary = data[1][config.primary]
          data = {}
          data[config.delete] = true
          save(primary, data)
            .then(response => {
              console.log(response)
            })
        }
      })
      it.on('select', (i) => {
        $('#tags').find(`.tag`).removeClass('active')
        $('#tags').find(`.tag[data-target=${i}]`).addClass('active')
      })
      it.on('deselect', (i) => {
        $('#tags').find(`.tag`).removeClass('active')
      })
      // activate
      $('#activate').on('click', e => {
        it.activate()
      })

      $('#tags').on('mouseover', '.tag', e => {
        it.getTagEl($(e.target).data('target')).mouseover()
      }).on('mouseout', '.tag', e => {
        it.getTagEl($(e.target).data('target')).mouseout()
      }).on('click', '.tag', e => {
        e.preventDefault()

      });
    }

    function formatRow (row) {
      delete row.id
      row.category = config.category
      row.item = config.item
      row.author = config.user
      return row
    }

    function save (primary, data) {
      return new Promise((resolve, reject) => {
        fetch(primary ? config.url + '/' + primary : config.url, {
          method: primary ? 'PUT' : 'POST',
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic {{ config.api.grant|base64_encode }}'
          }
        })
          .then(response => response.text())
          .then(resolve)
          .catch(reject)
      })
    }

    (function($) {

      setTimeout(() => {
        if (!config.url) {
          return false;
        }
        fetch(config.url + '?' + config.params, {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic {{ config.api.grant|base64_encode }}'
          }
        })
          .then(response => response.json())
          .then(init)
          .catch(e => {
            console.error(e)
          })
      }, 200)

    })(jQuery)

  </script>

  {% endif %}

</body>
</html>
